package 클래스;

public class Class {
/* 
 *    	  ┌클래스 선언(class 클래스명) 
 * 클래스 ──┤ 						┌─	필드 - 객체의 속성, 특징, 특성을 정의 
 * 		  │							│	(접근제어자 자료형 변수명;)
 * 		  └	클래스 정의 ───────────────┼── 생성자 - 멤버변수의 초기화와 메모리 할당
 * 									│	(클래스 이름과 동일. 반환형을 가지지 않는다)
 *									│
 *									└─	메서드 - 객체의 기능
 *										(접근제어자 제어자 반환형 메서드(매개변수){..})
 *										반환형 void -> return X
 *											 자료형 -> return O.
 *
 * [정적 멤버(static member)]
 * - 해당 클래스로 생성된 모든 인스턴스가 공유하는 멤버
 * - static 키워드 사용
 * - 프로그램이 시작될 때 딱 한번 메모리의 코드 영역에 할당되며 프로그램이 종료될 때까지 유지된다.
 *  (new 전에 공간을 받음, 이미 사용할 수 있는 준비가 됨)
 *  
 *  <정적 멤버 선언>
 *  - 필드 또는 메소드를 선언할 때 static 키워드를 붙인다.
 * 
 * <인스턴스 변수와 정적변수의 차이>
 * - 인스턴스 변수는 객체마다 가지고 있는 데이터 
 * 		메모리 할당 시점 : 인스턴스 생성시
 * 		메모리 할당 위치 : 힙 메모리
 * 		메모리 해제 시점 : 인스턴스 소멸시
 * - 정적변수는 공용적인 데이터
 * 		메모리 할당 시점 : 프로그램 시작시
 * 		메모리 할당 위치 : 코드 메모리
 * 		메모리 해제 시점 : 프로그램 종료시
 * 
 * 1) 정적 멤버 (클래스 필드)
 * [클래스 필드 사용]
 * 클래스명.필드명
 * 
 * - 정적멤버는 인스턴스를 만들지 않고 사용될 수 있다.
 * 
 * 2) 정적 메소드(클래스 메서드)
 * [클래스 메소드 사용]
 * 클래스명.메소드명();
 * 
 * ex)
 * public class Calculator{
 *  	public static int plus(int x, int y) {return x + y}
 * }
 * [사용] int result2 = Calculator.plus(3,9);
 * 
 * - 정적 메소드는 객체가 생성되지 않은 상태에서 호출되는 메소드이다
 * - 정적 메소드에서 정적 메소드를 호출하는 것은 가능하다.
 * - 정적 변수와 지역 변수만을 사용할 수 있다.
 * - 인스턴스 변수와 인스턴스 메소드 사용 불가.
 * - 정적 메소드는 this키워드를 사용할 수 없다. (this가 참조할 인스턴스가 없기때문에)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 *
 *
 *
 *
 */
	
}
