package 프로그램언어활용;

/*
 * 변수 : 프로그램 작성시 사용할 값을 저장하기 위해 할당받는 메모리 공간
 * 자료형(data type) : 변수에 저장되는 자료의 타입
 * (1) 기초형 : 정수, 실수, 문자(char), 논리(boolean)
 * (2) 참조형 : 문자열, 클래스, 배열, 인터페이스
 * 
 * 변수 선언
 * 데이터 타입 변수명;
 * ex) int number;
 * 
 * 변수 이름 규칙
 * (1) 문자와 숫자의 조합
 * (2) 첫 글자는 문자이거나 _, $여야 한다
 * (3) 공백을 포함할 수 없다
 * (4) 대문자와 소문자를 구별한다
 * (5) 첫 글자는 소문자로 시작하되 다른 단어와 함께 사용할 경우 첫 글자를 
 * 대문자로 한다 ex) long firstName
 * (6) 예약어를 사용할 수 없다
 * 
 * 표기법
 * (1) 낙타등 표기법 : 첫 단어의 첫 글자는 소문자로 적고 다음 단어들의 
 * 첫 글자는 소문자로 적는 것 (변수 이름과 메소드 이름에 사용)
 * (2) 파스칼 표기법 : 단어의 모든 첫 글자를 대문자로 (클래스 이름에 사용)
 * (3) 스네이크 표기법 : 단어 사이를 _로 연결한다
 * 
 * 메모리 : 데이터를 저장하기 위한 장치
 * 메모리의 크기
 * (1) 비트(bit) : 0과 1을 저장하는 최소 저장 단위
 * (2) 바이트(byte) : 8비트
 * 
 * 메모리 할당
 * - 메모리는 주솟값을 이용해서 값을 참조
 * 
 * 변수에 데이터 저장 (초기화)
 * 변수명 = 값;
 * int number; number = 1;  -> int number = 1;
 * 
 * 데이터 타입의 종류
 * (1) 논리형 : boolean isNumber = true;
 * - 값은 true or false
 * 변수 선언 = boolean 변수명;
 * 데이터 저장 = boolean 변수명 = true;
 * 			  boolean 변수명 = false;
 *  
 * (2) 문자형 : char gender = 'M';
 * - 작은 따옴표 사용
 * 변수 선언 = char 변수명;
 * 데이터 저장 = char 변수명 = '가';
 * 			  char 변수명 = '\uac00'; '가'를 나타낸다
 * 유니코드 : 모든 언어를 컴퓨터에서 표현하기 위해 부여한 고유 코드 (\u 유니코드)
 */ 
 /* 
 * (3) 정수형 : int age = 20;
 * - byte  1바이트
 * - short 2바이트
 * - int   4바이트 (기본적인 정수형)
 * - long  8바이트 / 뒤에 영어 L붙여야함 ex) long a = 12345L;
 * 
 * (4) 실수형 : double PI = 3.14;
 * 소수점이 있는 숫자
 * float  32비트 4바이트 / 뒤에 영어 F붙여야함 ex) float a = 0.12345f;
 * double 64비트 8바이트 (기본적인 실수형)
 * 
 * (5) 참조형 : String name = "홍길동";
 * 
 * 리터럴 (literal) : 변수에 저장되는 값
 * 
 * 상수 : 값을 바꿀 수 없는 변수
 * - final 사용
 * 선언 시 초기값 지정
 * 실행 중 값 변경 불가
 * 형식 : 상수선언 데이터타입 상수이름 = 초기화
 * ex)   final double   PI   = 3.141592;
 *
 * 자바의 특수문자
 * \b 백스페이스
 * \t 탭 (띄어쓰기..?)
 * \n 라인피드 (엔터)
 * \f 폼피드 (2f - 두 자리 출력 f.2 - 소수점 아래 두 자리 출력)
 * \r 캐리지 리턴 
 * \" 이중 인용부호
 * \' 단일 인용부호
 * \\ 백슬래시
 * 
 * null : 참조형에 사용, 아무 값도 주고 싶지 않을 때 사용
 * int n = null; X 기초형에 사용불가 			
 * String str = null; 
 * 
/*
 * var : 변수 타입을 정하지 않고 선언해도 컴파일러가 변수를 자동으로 추론해줌
 * - 지역변수 선언에 사용
 * - 반드시 초기값 지정
 * ex) var price = 200;    -> int로 결정
 * ex) var name; -> 불가능, 초기값 지정해야함
 * ex) var name = "이진리";  -> String으로 지정
 * 
 * Scanner 클래스 사용
 * - 사용자가 값을 입력할 수 있게 하는 것
 * 
 * (1) import java.util.Scanner;
 * 입력 기능을 가진 클래스를 불러오는 문장
 * 
 * (2) Scanner sc = new Scanner(System.in);
 * 		 sc 바꿔도 됨
 * (3) 사용자로부터 입력
 * x = sc.nextInt(); 사용자가 입력한 숫자를 읽는다
 * (4) 출력
 * System.out.print("첫번째 숫자를 입력하세요 : ") 
 * 
 * Scanner로 받은 값을 대입
 * - byte로 대입 = nextByte()
 * - short로 대입 = nextShort()
 * - int로 대입  = nextInt()
 * - long으로 대입 = nextLong()
 * - float로 대입 = nextFloat()
 * - double로 대입 = nextDouble()
 * - 공백 이전에 종료되는 문자열 = next()
 * - 한 줄의 문자열  - nextLint()
 * - 사용종료 = close
 * 
 * [연산]
 * 연산 : 식을 계산하여 결과 산출하는 것
 * 연산자 : 연산에 사용되는 기호 (+, -, *, /, %...)
 * 피연산자 : 연상 대상이 되는 데이터 
 * 
 * 3.14    *   radius
 * 피연산자 연산자 피연산자
 * 
 * 연산자의 종류
 * 				연산자 		피연산자 수 	기능
 * 산술연산자 / +, -, *, /, % /  이항	/ 사칙연산과 나머지
 * 부호연산자 /   	+, - 	   /  단항	/ 음수와 양수 표현
 * 문자열연산자/      +		   /  이항   / 두 문자열을 연결
 * 대입연산자 / =, +=, -= ... /  이항   / 우변의 값을 좌변의 변수에 대입
 * 증감연산자 /    ++, --	   /  단항   / 1만큼 증가/감소
 * 비교연산자 / ==. !=, <, >.../ 이항   / 값의 비교
 * 논리연산자 / !, &&, || 	   /단항,이항 / 논리적 NOT, AND,OR
 * 조건연산자 / (조건식)?A:B    /  삼항   / 조건식에 따라 A또는 B중 선택
 * 비트연산자 / ~, &, |, ^    /단항, 이항/ 비트 NOT,AND,OR,XOR
 * 쉬프트연산자/ >>, <<, >>>   /  이항   / 비트를 좌측/우측으로 밀어서 이동
 *  
 * 연산의 우선순위
 * 증감,부호,비트,논리(!)> 산술> 쉬프트> 비교> 논리> 조건 > 대입
 * 
 * 단항연산자 : 피연산자가 1개  ex) i++
 * 이항연산자 : 피연산자가 2개  ex) a+b, a<b
 * 삼항연산자 : 피연산자가 3개  ex) 조건식 ? A : B 
 * 
 * 형변환 : 자료형의 값을 다른 자료형의 값으로 바꾸어주는 것
 * (1) 자동형변환
 * ex) double d = 2 + 3.5
 * 작은 크기를 가진 자료형 -> 더 큰 크기를 가진 자료형
 * byte(1byte) < short(2) < int(4) < long(8) < float(4) < double(8)
 * 
 * 
 * (2) 강제형변환
 * 데이터타입 변수명 = (데이터타입) 변수명 or 값;
 * ex) int i = (int)12.5
 * ex) double d = (double)100;
 * 
 * 
 * 
 * 
 * 
 */
/*
 * [제어문]
 * - 코드 실행을 개발자가 원하는 방향으로 할 수 있도록 한다.
 * (1) 조건문 (if문, switch문) 
 * -조건에 따라 여러개의 실행경로 중 하나를 선택
 * 
 * ======= if문 =======
 * 1- 단일if문
 * if(조건식)   조건식이 true면 실행문1 -> 실행문2
 * 	실행문1;	        false면 실행문2 실행
 * 실행문2;
 * 
 * 2- if~else문
 * if(조건식)	  조건식이 true면 실행문1 -> 실행문3
 * 	실행문1;	  		false면 실행문2 -> 실행문3
 * else
 * 	실행문2;
 * 실행문3;
 * 
 * 3- if ~ else if문
 * if (조건식)		조건식이 true면 실행문1
 * 	실행문1;			조건식1이 false고 조건식2가 true면 실행문2 
 * else if (조건식2)	조건식1,2가 false고 조건식3이 true면 실행문3
 * 	실행문2;			조건식이 모두 false면 실행문4
 * else if (조건식3)
 * 	실행문3;
 * else
 * 	실행문4;
 * 
 * 4- 중첩if문
 * if(조건식){			조건문1이 true면 실행문1
 * 		실행문1			조건문1이 false면 else로 가서
 * }else {				조건식2 확인 
 * 		if(조건식2){		조건식2가 true면 실행문2
 * 			실행문2		조건식2가 false면 실행문3
 * 		}else {
 * 			실행문3
 * 
 * 
 * =======switch ~ case문========
 * -각 조건에 따라 실행되어야하는 코드가 다를때 사용
 * -case에는 변수 사용X, 수식(a>3) 사용X
 * switch (값){
 * 	case 값1:		값과 case1이 같다면 실행문1 실행 후 멈춤
 * 		실행문1;
 * 		break;
 * 	case 값2:		값과 case2가 같다면 실행문2 실행 후 멈춤
 * 		실행문2;
 * 		break;
 * 	default:		값과 모든 case가 다르다면 실행문3
 * 		실행문3
 * }
 * 
 * 
 * 
 * 
 * 
 * (2) 반복문 (for문, while문, do-while문)
 * - 조건에 따라 여러 개의 같은 처리를 반복
 * - 반복문을 구성하는 것 
 * 	1- 초기값
 *  2- 반복 횟수를 결정하는 조건식
 *  3- 반복 실행문
 *  4- 증감식
 * 
 * ============for문==========
 * 
 * for(초기갑;조건식;증감식){
 * 	실행문;
 * }
 * 초기값이 증감식으로 증감하며 조건식이 false일때까지 실행문 실행
 * 
 * ex)
 * int sum = 0;
 * for(int i = 1; i <= 10; i++{
 * 		sum += i;
 * }
 *  ==> 1부터 10까지 정수의 합
 * 
 * 
 * 
 * 
 * ============while문=========
 * - 조건이 만족하는 동안 특정 문장을 수행
 * - 증감식 꼭 필요함
 * 
 * 변수선언or초기화;
 * while(조건식){
 * 		실행문;
 * 		증감식;
 * }
 * 
 * int i = 1;
 * sysout("정수:");
 * while(i<=5) {
 * 		sysout (i + " ");
 * 		i++;
 * }
 * sysout();
 * ==> 1부터 5까지 출력
 * 
 * 
 * 
 * 
 * 
 * =============do while문=======
 * - 반복문을 먼저 수행하고 조건을 나중에 확인한다
 * - 조건을 무조건 한 번 이상 실행
 * 
 * 변수선언or초기값;
 * do{ 
 * 		실행문;
 * 		증감식;
 * }while (조건식);
 * 
 * 
 * 
 * 
 * (3) 보조제어문(분기문)(break문, continue문, return문)
 * 
 * 1- break
 * 반복문이나 switch문의 case를 벗어날 때 사용
 * 가장 가까운 반복문만 종료한다
 * 바깥쪽 반복문까지 종료시키려면 반복문에 이름(Label)붙이고
 *  "break이름;"사용
 * 
 * Label: for(...){
 * 		for(...){
 * 			if(조건식)
 * 				break Label;
 * 		}
 * }
 * 
 * 
 * 
 * 2- continue문
 * while문, do~while문의 조건식으로 가게 함
 * for문의 증감식으로 가게 함
 * 반복 중 특정값의 처리를 제외할 때
 * for(...){
 * 		if(조건식)
 * 		continue;
 * }
 * 
 * while(...){
 * 		if(조건식)
 * 		continue;
 * }
 * 
 * 
 * 3- return문
 * 메서드에서 특정값을 리턴값으로 보내고 싶을 때 사용
 * 
 *
 * 
 * 
 * 
/
/* 
 * [배열]
 * -참조변수
 * -변수명으로 접근 -> 주소값을 참조
 * -같은 타입의 데이터여야 함
 * 
 * 참조변수의 ==,!= 연산
 * -동일한 객체의 주소값을 비교
 * String name = new String("홍길동")
 * String name2 = new String("홍길동")
 * name과 name2는 같지않음
 * 주소가 달라서 문자비교 메소드를 써야함
 * 
 * null(널)
 * - 참조하는 객체가 없을 때
 * 참조타입에만 사용
 * 
 * [배열의 선언과 사용]
 * - 같은 타입의 데이터를 연속된 공간에 저장
 * 	(여러 변수를 하나의 이름으로)
 * - 각 데이터는 인덱스로 접근(0부터 시작) 
 *  ex) num[0]
 *  
 *  인덱스
 *       배열이름          [인덱스]
 * (배열 저장공간의 주소) (데이터의 위치)
 *  
 * 배열의 장점
 * -중복된 변수 선언 줄일 수 있따
 * -반복문을 이용해 쉬운 처리
 * 
 * [배열 생성]
 * new 데이터타입[개수];
 * ex)new int[5];
 * int타입 데이터가 들어갈 공간 5개 만듦
 * 
 * [배열 선언]
 * 데이터 타입[] 변수명;
 * 데이터 타입 변수명[];
 * 
 * [배열 선언과 동시에 생성]
 * 데이터타입[] 변수명 = new 데이터 타입[개수];
 * ex) int[] numbers = new int[5];
 * 
 * [배열 초기화]
 * - 인덱스로 접근하여 하나하나 초기화
 * - 데이터 타입 [] 배열명 = new 데이터타입[](값1, 값2, 값3..);
 * 
 * 배열의 길이.length
 * int[] arr = {10, 20, 30, 40, 50}';
 * for (int i = 0; i<arr.length; i++){
 * 		system.out.print(arr[i]);
 * }
 * 
 * 확장for문
 * for(데이터 타입 변수 : 배열명){
 * 		실행문
 * }
 * int[] numbers = {10,20,30}
 * for(int num:numbers){
 * 		sysout.print(num);
 * }
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */	
	
	
