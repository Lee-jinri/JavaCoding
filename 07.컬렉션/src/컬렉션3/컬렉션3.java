package 컬렉션3;

public class 컬렉션3 {
/*
 [Stack 클래스]
 
 <Stack 클래스의 메서드>
 리턴타입   메서드 					설명
 	E	push(E item) 	주어진 객체를 스택에 저장(삽입)
 	E 	peek() 			스택의 맨 위 객체를 가져온다
 	E 	pop()
 
 [Queue 인터페이스]
 - 한 쪽 끝에서는 삽인을 하고 반대쪽 끝에서는 삭제를 한다.
 - 선입선출의 순서 (FIFO : First In First Out)
 - 한 쪽을 프런트(front)로 정하고 삭제한 수행하도록하고 반대쪽을 리어(reer)로 정해 삽입만 수행하도록 한다.
 - 삭제를 디큐(dequeuer)라고 하고 삽인을 인큐(enqueuer)라고 한다
 - 링크드 리스트를 저장한다. (링크드리스트가 구현클래스)
 
  Queue<E> queue = new LinkedList<E>();
  
 <Queue> 인터페이스의 메서드
 리턴타입 메서드 설명
 boolean offer(E e) 주어진 객체를 큐에 저장.
 E peek() 객체 하나를 가져온다. (객체를 큐에서 제거하지 않는다)
 E poll() 객체 하나를 가져온다. (객체를 큐에서 제거한다.)
 
 큐 
 		프런트           				리어
삭제 <-  									<- 삽입
저장된 데이터 중 첫번째 				저장된 데이터 중 마지막
 
 [컬렉션 프레임워크]
 * ArrayList 클래스 
 * - 배열 기반으로 데이터의 추가와 삭제에 불리하다. 순차적인 추가와 삭제는 제일 빠르다. 임의의 항목에 대한 접근성이 좋다.
 * LinkedList 클래스
 * - 연결구조 기반으로 데이터의 추가와 삭제에 유리하다.
 * ============추가
 * 
 * <Collections 클래스>
 */
}
