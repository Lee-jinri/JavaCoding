package IO입출력;

public class IO입출력 {
	/*
	 * 프로그램 외부의 데이터를 읽어오거나 외부로 출력하때
	 * 	java.io IO객체등을 사용하여 처리한다.
	 * 
	 * [IO 입출력]
	 * 메모리에서 외부 장치로 데이터를 내보내는 것이 출력(output)이고
	 * 외부 장치에서 메모리로 데이터를 받아들이는 것이 입력(input)이다.
	 * 외부장치는 키보드와 모니터가 대표적이다.
	 * 
	 * <stream>
	 * - 스트림은 데이터의 입출력을 도와주는 중간 매개체이다. (데이터의 흐름을 형성해주는 통로를 의미한다.)
	 * - 순서가 있는 데이터의 연속적인 흐름
	 * - 프로그램이 데이터를 입력받을 때는 입력스트림이라고 부르고, 프로그램이 데이터를 보낼 때는 출력스트림이라고 부른다.
	 * 
	 *  (출발지)	----------->	(도착지)프로그램(출발지) --------------> (도착지)
	 * 1.키보드	 입력 스트림							  출력 스트림		1.모니터
	 * 2.파일															2.파일
	 * 3.프로그램														3.프로그램
	 * 
	 * <스트림의 특징>
	 * - 스트림은 FIFO(First In First Out)의 구조를 갖는다.
	 * - 양방향 전송을 하려면 출력 스트림, 입력 스트림 각각이 필요하다.
	 * 
	 * <스트림의 분류>
	 * - java.io 패키지에 존재하며 데이터의 종류에 따라 크게 2가지로 나눈다.
	 *  분류 1
	 *  (1) 바이트 스트림 : 바이트 단위로 읽고 쓰기위한 클래스. (그림,멀티미디어,문자 등 모든 종류의 데이터를 받고 보내는 것이 가능하다.)
	 *   - 데이터를 1바이트(8비트) 단위로 전송한다.
	 *   - 추상 클래스인 InputStream과 OutputStream 클래스가 최상위 클래스이다.
	 *   - 바이트 스트림 클래스 이름에는 InputStream(입력)과 OutputStream(출력)이 붙는다.
	 *   - 파일과 객체, 기본형의 입출력에 사용한다.
	 *    1-1 입력 바이트 스트림 (...InputStream)
	 *    1-2 출력 바이트 스트림 (...OutputStream)
	 *  (2) 문자 스트림 : 문자 단위(유니코드)로 읽고 쓰기 위한 클래스. (문자만 받고 보낼 수 있도록 특화됨.)
	 *   - 데이터를 2바이트(16비트) 단위로 전송한다.
	 *   - 추상 클래스인 Reader와 Writer 클래스가 최상위 클래스이다.
	 *   - 문자 스트림 클래스 이름에는 Reader(입력)과 Writer(출력)가 붙는다.
	 *   - 문자만 입출력 할 수 있다.
	 * 	  2-1 입력 바이트 스트림
	 * 	  2-2 출력 바이트 스트림
	 * 
	 *  분류 2 : 기능에 따른 분류
	 *  (1) 1차 스트림 = 데이터 싱크 스트림 
	 *   - 실제 데이터를 주고받는 입출력 스트림을 직접 생서ㅓㅇ한다. 기본가
	 *  (2) 2차 스트림 = 데이터 처리 스트림
	 *   - 1차 스트림에 기능을 추가해 확장한 스트림. 자체만으로 입출력을 수행하지 못한다.
	 *   
	 * <1. 바이트 스트림>
	 *  - 바이트 단위로 입출력을 수행한다.
	 *  ex) InputStream m = new FileInputStream(파일명);
	 *  
	 * 	1.InputStream : 바이트 입력 스트림에서 사용하는 추상클래스, 최상위 클래스
	 * 		- FileInputStream : 파일에서 데이터를 바이트 단위로 읽어들이는 클래스
	 * 		- FilterInputStream : 필터가 있는 바이트 입력 스트림에서 사용하는 추상 클래스
	 *		- DataInputStream 바이트 단위가 아니라 기본 자료형인 데이털ㄹ 바이트 스트림을 읽어들이는 클래스
	 * 		- BufferInpurStream : 버퍼가 있는 바이트 입력 스트림에서 사용하는 클래스. 버퍼로 인해 성능이 향상된다.
	 * 		- ObjectInputStream : 객체 단위로 직렬화된 데이터를 역직렬화하여 읽어들이는 클래스
	 * 
	 * 	2.OutputStream : 바이트 출력 스트림에서 사용하는 추상클래스, 최상위 클래스
	 * 		- FileOutputStream : 데이터를 바이트 단위로 파일에 저장하는 클래스 
	 * 		- FilterOutputStream : 필터가 있는 바이트 출력 스트림에서 사용하는 추상 클래스
	 * 		- DataOutputStream : 바이트 스트림을 바이트 단위가 아니라 기본 자료형인 데이터로 내보내는 클래스.
	 * 		- BufferedOutputStream : 버퍼가 있는 바이트 출력 스트림에서 사용하는 클래스. 버퍼로 인해 성능이 향상된다.
	 * 		- ObjectOutputStream : 바이트를 객체 단위로 직렬화하여 저장하는 클래스.
	 * 
	 *  *   체크 예외, 비체크 예외에서 
	 *   - 체크예외의 대상 (예외처리를 반드시 해야함.)
	 *   	1, 파일 입출력
	 *   	2, 네트워크 입출력
	 *   	3, 데이터베이스 입출력
	 *   
	 * [InputStream]
	 *   abstract int read() 
	 *  
	 *  <InputStream의 메소드>
	 *   int read()
	 *    : 1바이트의 데이터를 읽어서 반환하는 메소드이다. 더 이상 읽을 데이터가 없으면 -1을 반환한다.
	 *   int read(byte[] bug)
	 *    : 입력 스트림을 통해서 읽혀진 데이터들이 배열에 저장된다. 실제 읽은 데이터와 바이트 크기를 반환한다. 읽을 데이터가 없으면 -1 반환.
	 *   int read(byte[] buf,int off, int len)
	 *    : 입력 스트림으로부터 len개의 바이트 만큼 읽고 매개변수인 바이트 배열 buf[off]부터 len개까지 저장한다.
	 *      실제로 읽은 바이트수인 len개를 리턴한다. 만약 len개를 읽지 못하면 실제로 읽은 바이트 수를 리턴한다.
	 * 
	 *  (read() 메소드에 대해서)
	 *  - 파일에는 포인터(pointer)라는 개념이 있다. 파일 포인터는 파일에서 데이터의 위치를 가리킨다.
	 *  프로그램에서 파일을 읽거나 쓸 때는 파일포인터가 가리키는 곳부터 작업을 시작하고, 작업이 끝나면 작업한 마큼 파일 포인터가 이동한다.
	 *  초기의 포인터는 시작 지점(첫 글자)에 위치하고 read() 메소드가 실행되면 파일 포인터가 위치한 문자 한 개를 읽어오고
	 *  포인터는 다음 문자를 가리킨다. 이러한 작업을 read() 메서드가 실행될 때마다 반복한 다음, 
	 *  모든 문자를 읽으면 파일포인터는 파일의 끝을 가리킨다. 
	 * 
	 *  <FileInputStream의 생성자>
	 *   - FileInputStream(File file)
	 *   	: File 객체에 연결된 파일로부터 바이트를 읽는 객체를 생성한다.
	 *   - FileInputStream(String name)
	 *     : 파일의 경로이름이 name 인 파일과 연결된 입력 담당 객체를 생성한다.
	 *   
	 *   FileInputStream in = new FileInputStream("input.txt");
	 *    - FileInputStream 객체가 생성될 때 파일과 직접 연결
	 *    - 파일이 존재하지 않으면 FileNotFoundException발생 
	 *    - 반드시 try-catch문으로 예외처리 해야함.
	 * 
	 * [OutputStream]
	 *  abstract void write(int data)
	 *  
	 *  <OutputStream의 메소드>
	 *   void write(int data)
	 *   : 인자로 전달된 1바이트 데이터를 출력 스트림을 통해 목적지로 전달하는 메소드이다
	 *   void write(byte[] buf)
	 *    : buf 배열을 출력 스트림을 통해 목적지로 전달하는 메소드이다.
	 *   void write(byte[] buf, int off, int len)
	 *   : 매개변수 buf로 전달된 배열을 대상으로 off의 인덱스 위치부터 시작해서 len 바이트를 출력스트림을 통해서 전송하는 메소드이다.
	 *   
	 *	<FileOutputStream의 생성자>
	 *	 - FileOuputStream(File file)
	 * 		: File 객체가 나타내는 파일에 바이트를 쓰는 객체를 생성한다.
	 * 	 - FileOutputStream(String name)
	 * 		: 파일의 경로 이름이 name 인 파일과 연결된 출력 담당 객체를 생성한다.
	 * 	 - FileOutputStream(String name, append)
	 * 		: append가 true이면 파일의 끝에 바이트를 추가하고 false이면 바이트를 기존의 바이트 위에 겹쳐서 쓴다.
	 * 
	 * FileOutputStream in = new File OutputStream("output.txt",false);
	 * - 파일이 이미 존재할 경우, 데이터를 출력하게 되면 파일을 덮어쓰는게 기본값(false)으로 설정되어있다
	 * - 덮어쓰기 안하고 싶으면 그냥 파일명만 주면 됨.	
	 * - 이어쓰려면 true
	 * 
	 */

}
